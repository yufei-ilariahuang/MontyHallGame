{"version":3,"sources":["Door.js","goat_tr.png","car_tr.png","PlayingArea.js","bayes.jpg","App.js","reportWebVitals.js","index.js"],"names":["Door","_ref","id","onclick","isOpen","cssClasses","React","createElement","onClick","className","join","getRandomNumber","n","Math","floor","random","PlayingArea","resetGame","gameEnd","totalGame","winningGames","switchingWins","doorState","changeState","useState","winingState","changeWinningState","useEffect","isSwitch","openDoorHandler","push","x","res","openDoorNumber","map","element","index","Fragment","src","carImg","goatImg","Header","Sider","Content","Layout","App","state","Date","now","changeWinningGames","ChangeSwitchingWins","changeTotalGame","collapsed","changeCollapse","style","position","top","zIndex","width","collapsible","breakpoint","collapsedWidth","marginTop","height","class","parseFloat","toFixed","key","win","switchwin","y","pic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5f2768dc.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { useState } from 'react'\n// Exports a functional component named 'Door'\n/**\n *id: An identifier for the door, likely used to distinguish between multiple doors.\n *onclick: A function that will be called when the door is clicked.\n *isOpen: A boolean that determines whether the door is open or closed.\n */\nexport const Door = ({id,onclick,isOpen}) => {\n\n  // cssClasses: An array of class names for styling the door.\n  // 'door' is a default class.\n  // 'doorOpen' is conditionally added based on the 'isOpen' prop.\n\n  const cssClasses=[\"door\",isOpen?\"doorOpen\":\"\"]\n  return (\n    // A div representing the door.\n    // - onClick handler: Triggers 'onclick' function passed in props with the 'id' of the door.\n    // - className: Combines the classes from cssClasses array for styling.\n    \n    <div onClick={()=>{onclick(id)}} className={cssClasses.join(' ')}>{!isOpen&&<div><b>Open</b></div>}</div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/goat_tr.aa11c8c2.png\";","export default __webpack_public_path__ + \"static/media/car_tr.e3b10ac6.png\";","import React, { useEffect, useReducer, useState } from 'react'\nimport { Door } from './Door';\nimport goatImg from './goat_tr.png'\nimport Stack from '@mui/material/Stack';\n\nimport Button from '@mui/material/Button';\nimport carImg from './car_tr.png'\n/**\n * Generates a random integer between 0 and n-1.\n * Note: Due to the implementation, if n is greater than 10, this function will not \n * be able to generate all numbers in the range [0, n-1].\n *\n * @param {number} n - The upper limit (exclusive) for the random number generation. \n *                     The function returns a number in the range [0, n-1].\n * @returns {number} A random integer between 0 and n-1.\n */\nconst getRandomNumber=(n)=>\n{\n   return ((Math.floor(Math.random() * 10))%n)\n}\n\n\n\nexport const PlayingArea = ({resetGame,gameEnd,totalGame,winningGames,switchingWins}) => {\n\n    let a=[0,1,2]\n   \n    const [doorState,changeState]=useState([0,0,0,0])\n    const [winingState,changeWinningState]=useState(0)\n\n    useEffect(()=>\n    {\n         changeWinningState(getRandomNumber(3))\n    },[])\n    \n    let isSwitch=[]\n\n    const openDoorHandler=(id)=>\n    {\n          \n          if(!doorState[id])\n          {\n               isSwitch.push(id)               \n                 if(!doorState[3])\n                 {\n                      let x=doorState\n                      if(winingState==id)\n                      {\n                             let openDoorNumber=getRandomNumber(2)+1\n                                        x= x.map((element,index)=>\n                                            {\n                                                if(index!=id)\n                                                {\n                                                    openDoorNumber--;\n                                                    if(openDoorNumber==0)\n                                                    {\n                                                        return 1;\n                                                    }\n                                                    else\n                                                    {\n                                                        return 0;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    return 0;\n                                                }\n                                            })\n                        }\n                        else\n                        {\n                            let openDoorNumber=getRandomNumber(2)+1\n                            x= x.map((element,index)=>\n                                {\n                                    if(index!=id&&index!=winingState)\n                                    {\n                                        return 1;\n                                    }\n                                    else\n                                    {\n                                        return 0;\n                                    }\n                                })\n                        }\n                        x[3]=1\n                         changeState([...x])\n                 }\n                 else if(doorState[3]==1)\n                 {\n                      //   check win or not \n                       let x=doorState\n                       x[id]=1\n                       x[3]=2\n                       changeState([...x])\n                       if(id==winingState)\n                       {\n                           let res=(isSwitch[0]==isSwitch[1]?0:1)\n                           gameEnd(1,res)\n                       }\n                       else\n                       {\n                           gameEnd(0,0)\n                       }\n                       \n                 }\n          }\n\n    }\n\n  return (\n    <> \n       <h1>Simulation</h1>\n       <hr/>\n       <div className='playing-area'>\n        <div className='container'>\n        {\n          a.map((element)=>{\n\n           return (<div className='box'><div className=\"backDoor\">\n             <img src={element==winingState?carImg:goatImg} className='img'>\n              </img>\n             <Door id={element} onclick={openDoorHandler} isOpen={doorState[element]} ></Door>\n        </div>\n        </div>\n           )\n          })\n       }\n       </div>\n   \n       </div>\n       \n    </>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/bayes.7e7e3282.jpg\";","import React from 'react';\n\nimport './App.css';\nimport { useState } from 'react'\nimport { PlayingArea } from './PlayingArea';\nimport {Layout} from 'antd';\nimport pic from './bayes.jpg'\nconst {Header,Sider,Content} =Layout;\n\n\n\n\n\nfunction App() {\n\n  const [state,changeState]=useState(Date.now())\n  const [winningGames,changeWinningGames]=useState(0)\n  const [switchingWins,ChangeSwitchingWins]=useState(0)\n  const [totalGame,changeTotalGame]=useState(0)\n  const [collapsed,changeCollapse]=useState(0)\n  const resetGame=()=>\n  {\n        changeState(Date.now())\n  }\n  const gameEnd=(win,switchwin)=>\n  {\n        let y=switchingWins+switchwin\n        \n        let x=winningGames+win;\n        changeTotalGame(totalGame+1)\n        ChangeSwitchingWins(y)\n        changeWinningGames(x)\n  }\n\n\n  return (\n      <>\n      <Layout>\n      <Header   style={{\n          position: 'fixed',\n          top: 0,\n          zIndex: 1,\n          width: '100%',\n        }}>\n          <div className='logo'>GROUP 3</div>\n          \n          </Header>\n      </Layout>\n      <Layout>\n            <Sider  collapsible  breakpoint=\"xs\"\n        collapsedWidth=\"0\"\n         width={300} style={{\n          position: 'fixed',\n          marginTop:'50px',\n          zIndex: 2,\n          width:'700px',\n          height:'100%'\n        }} >\n                <div className='container-1'>\n    <div className='container-2'>\n  <table class=\"table table-hover\">\n  <tbody>\n    <tr>\n     <th width=\"5%\">TOTAL GAME</th>\n     <td width=\"5%\">{totalGame}</td>\n    </tr>\n    <tr>\n     <th width=\"5%\">WIN</th>\n     <td width=\"5%\">{winningGames}</td>\n     </tr>\n     <tr>\n\n     <th width=\"5%\">LOSE</th>\n     <td width=\"5%\">{totalGame-winningGames}</td>\n     </tr>\n     <tr>\n     <th width=\"5%\">WIN %</th>\n     <td width=\"5%\">{(totalGame>0?parseFloat((winningGames/totalGame)*100).toFixed(2):0)}%</td>\n     </tr>\n     <tr>\n     <th width=\"5%\">Switch Wins</th>\n     <td width=\"5%\">{switchingWins}</td>\n     </tr>\n     <tr>\n     <th width=\"5%\">Switch Wins%</th>\n     <td width=\"5%\">{(totalGame>0?parseFloat((switchingWins/totalGame)*100).toFixed(2):0)}%</td>\n     </tr>\n     <tr>\n     <th width=\"5%\">Stick Wins</th>\n     <td width=\"5%\">{winningGames-switchingWins}</td>\n     </tr>\n     <tr>\n     <th width=\"5%\">Stick Wins%</th>\n     <td width=\"5%\">{(totalGame>0?parseFloat(((winningGames-switchingWins)/totalGame)*100).toFixed(2):0)}%</td>\n    </tr>\n    <tr>\n    </tr>\n    <tr>\n    \n    </tr>\n  </tbody>\n</table>\n</div>\n<div className='btn-container'><button  onClick={()=>{resetGame()}} className='btn btn-dark custom-btn'>RESET</button></div>\n<div >\n           \n  </div>\n</div>\n        </Sider>\n             \n            <Content className='content'>\n            <div className='body'>\n      <h1>Monty Hall Game</h1>\n      <p>Trying to find the best strategy to win in this game is a famous brain teaser, not least because so many people get it wrong. Let's Make a Deal and named after its original host, Monty Hall.</p>\n      <h4>The game is simple:</h4>\n\n      <p>you are shown three closed doors. Behind one of them is a car, behind the two others, a cow. You first pick one door, but it does not open right away. The game host, Monty Hall, who knows behind which door the car is waiting, then teases you by opening one of the two doors that you had not picked to show you the cow sitting there. Then he may offer you a choice: staying with your original pick, or switching to the third remaining door.</p>\n      <h4>The question is: </h4>\n      <p>Should you switch or shouldn't you?</p>\n\n       <PlayingArea key={state} resetGame={resetGame} gameEnd={gameEnd} totalGame={totalGame} winningGames={winningGames} switchingWins={switchingWins}/>\n      <h1>Using Bayes’ Theorem to Solve the Monty Hall Problem</h1>\n\n      <p>Let’s assume you pick door 1 and then Monty shows you the goat behind door 2. In order to use Bayes’ Theorem we need to first assign an event to A and B.</p>\n      <ol>\n      <li><p>Let event A be that the car is behind door number 1.</p></li>\n      <li><p>Let event B be that Monty opens up door 2 to show the goat.</p></li>\n      </ol>\n      <h4>Here’s the Bayes’ solution</h4>\n      <img src={pic} className='img'></img>\n     <p>Pr(A) is pretty simple to figure out. There is a 1/3 chance that the car is behind door 1. There are two doors left, and each has a 1/2 chance of being chosen — which gives us Pr(B|A), or the probability of event B, given A.Pr(B)</p>\n     <p>Our Monty Hall game simulation allows you to test this out for yourself and see the results for yourself. Simply choose a door and see if you win the prize. You can play as many times as you like and see how often you come out on top</p>\n     <p>Our Monty Hall game simulation allows you to test this out for yourself and see the results for yourself. Simply choose a door and see if you win the prize. You can play as many times as you like and see how often you come out on top</p>\n     <p>@ Yuxin Hu: hu.yuxin3@northeastern.edu</p>\n     <p>@ Yufei Huang: huang,yufe@northeasyern.edu</p>\n     <p>@ Jiameng Ji:  ji.jiam@northeastern.edu</p>\n     <p>@ Yiqing Jiang:  jiang.yiqi@northeastern.edu</p>\n     <p>@ Chengxu Lan: lan.che@northeastern.edu</p>\n     <li><p>© 2023 northeastern university</p></li>\n    </div>\n           </Content>\n      </Layout>\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}